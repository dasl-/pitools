#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import pathlib
import time

BASH_EXECUTABLE='/bin/bash'

def parseArgs():
    parser = argparse.ArgumentParser(description="""
        Setup new sd card for raspberry pi. Must be run as sudo. Images disk, sets up wifi, sets up ssh. Run from laptop.
        """)
    parser.add_argument('--disk-num', dest='disk_num', action='store', required = True,
        help='Disk number via `diskutil list`. This disk will be overwritten, so don\'t get this wrong.')
    parser.add_argument('--disk-image', dest='disk_image', action='store', required = True,
        help='Path to disk image. Download Raspberry Pi OS Lite image from https://www.raspberrypi.org/software/operating-systems/')
    parser.add_argument('--device-path', dest='device_path', action='store', default='/Volumes/boot',
        help='Mounted volume path after SD card has been imaged. Default: %(default)s')
    parser.add_argument('--wifi-network-name', dest='wifi_network_name', action='store', required = True,
        help='Name of the network to join')
    parser.add_argument('--wifi-password', dest='wifi_password', action='store', required = True,
        help='Password of the network to join')
    parser.add_argument('--wifi-country-code', dest='wifi_country_code', action='store', default='US',
        help='Your ISO-3166-1 two-letter country code. Default: %(default)s. See: ' +
        'https://www.iso.org/obp/ui/#search')

    if os.getuid() != 0:
        print("This script must be run as sudo.\n")
        parser.print_help()
        exit(1)

    args = parser.parse_args()
    args.device_path = args.device_path.rstrip('/')
    return args

# https://www.raspberrypi.org/documentation/installation/installing-images/mac.md
def imageSdCard():
    print("Writing disk image, may take up to 15 minutes...")
    command(f'diskutil unmountDisk /dev/disk{args.disk_num}')
    command(f'sudo dd bs=1m if={args.disk_image} of=/dev/rdisk{args.disk_num}; sync')

    # Wait a few seconds for args.device_path to remount again (I guess this takes some time?).
    # Need it to be remounted before writing wifi and ssh files.
    time_limit = time.time() + 10
    while True:
        if os.path.isdir(args.device_path):
            break
        time.sleep(0.5)
        if time.time() > time_limit:
            print(f"Failed to remount {args.device_path}.")
            sys.exit(1)

# https://raspberrypi.stackexchange.com/a/57023
def setupWifi():
    print("Setting up wifi...")
    my_dir = pathlib.Path(__file__).parent.absolute()
    command(f'sudo {my_dir}/wifi_config --wifi-network-name {args.wifi_network_name} ' +
        f'--wifi-password {args.wifi_password} --wifi-country-code {args.wifi_country_code} ' +
        f'--device-path {args.device_path}')

def setupSsh():
    print("Enabling ssh...")
    command(f'sudo touch {args.device_path}/ssh')

def finish():
    print("Ejecting SD card...")
    command(f'sudo diskutil eject /dev/rdisk{args.disk_num}')
    print("""
SD card setup was successful! Please insert the SD card into the raspberry pi and boot it up.
Your raspberry pi will be accessible via:

    ssh pi@raspberrypi.local
    password: raspberry
""")

def command(command):
    return (subprocess
        .check_output(command, shell = True, executable = BASH_EXECUTABLE)
        .decode("utf-8"))

args = parseArgs()
imageSdCard()
setupWifi()
setupSsh()
finish()
