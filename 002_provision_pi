#!/usr/bin/env bash

set -eou pipefail

SSH_KEY_TO_AUTHORIZE="$HOME/.ssh/id_ed25519.pub"
SSH_KEY_TO_ADD="$HOME/standard_raspberry_pi_key/id_ed25519.pub"
OLD_HOSTNAME="raspberrypi.local"
NEW_HOSTNAME="$OLD_HOSTNAME"
OLD_PASSWORD="raspberry"
NEW_PASSWORD="$OLD_PASSWORD"
GIT_USER_EMAIL=''
GIT_USER_NAME=''
ENABLE_SPI=false
PRIV_SSH_KEY_FILE=''

# Make things require as little user input as possible.
# dont warn about hostkey not existing, don't add host key to known_hosts file since this may be a short lived
# "raspberrypi.local" host if we are changing the hostname anyway. Else subsequent hosts with the same name
# will have SSH errors if another machine's host key is already present under the "rapberrypi.local" hostname.
SSH_OPTS="-o StrictHostKeyChecking=no -o 'UserKnownHostsFile /dev/null'"

usage(){
    echo "Usage: $(basename "${0}") [-i <SSH_KEY_TO_AUTHORIZE>] [-j <SSH_KEY_TO_ADD>] [-h <NEW_HOSTNAME>] [-g <OLD_HOSTNAME] [-p <NEW_PASSWORD] [-o <OLD_PASSWORD] [-s]"
    echo "Run this from laptop."
    echo "  -i SSH_KEY_TO_AUTHORIZE : path to ssh key to add to authorized_keys for passwordless login on raspberry pi"
    echo "                            Defaults to: $SSH_KEY_TO_AUTHORIZE"
    echo "  -j SSH_KEY_TO_ADD       : path to ssh key to copy to ~/.ssh on the raspberry pi. If you specify the public"
    echo "                            key path, the corresponding private key will also be copied and vice versa."
    echo "                            Defaults to: $SSH_KEY_TO_ADD"
    echo "  -h NEW_HOSTNAME         : Change the raspberry pi's hostname. Defaults to $OLD_HOSTNAME."
    echo "  -g OLD_HOSTNAME         : Defaults to $OLD_HOSTNAME"
    echo "  -p NEW_PASSWORD         : Change the raspberry pi's password. Defaults to $OLD_PASSWORD"
    echo "  -o OLD_PASSWORD         : Defaults to $OLD_PASSWORD"
    echo "  -e GIT_USER_EMAIL       : email address for git"
    echo "  -u GIT_USER_NAME        : user name for git"
    echo "  -s                      : Enable SPI"

    exit 1
}

while getopts ":i:j:h:g:p:o:e:u:s" opt; do
    case ${opt} in
        i) SSH_KEY_TO_AUTHORIZE=${OPTARG} ;;
        j) SSH_KEY_TO_ADD=${OPTARG} ;;
        h)
            if [[ "$OPTARG" =~ ^[a-z]([a-z0-9-]*[a-z0-9])?$ ]]; then
                NEW_HOSTNAME=${OPTARG}
            else
                echo "Invalid hostname."
                usage
            fi
            ;;
        g) OLD_HOSTNAME=${OPTARG} ;;
        p) NEW_PASSWORD=${OPTARG} ;;
        o) OLD_PASSWORD=${OPTARG} ;;
        e) GIT_USER_EMAIL=${OPTARG} ;;
        u) GIT_USER_NAME=${OPTARG} ;;
        s) ENABLE_SPI=true ;;
        *) usage ;;
      esac
done

main(){
    validateOpts

    setupSsh
    provisionPi

    echo -e "\\nDone provisioning raspberry pi!"
}

validateOpts(){
    :
}

setupSsh(){
    echo -e "\\nAuthorizing passwordless ssh with $SSH_KEY_TO_AUTHORIZE..."
    echo -e "When asked for a password, please enter the raspberry pi's password (probably: '$OLD_PASSWORD').\\n"
    eval "ssh-copy-id $SSH_OPTS -i $SSH_KEY_TO_AUTHORIZE pi@$OLD_HOSTNAME"

    if [[ ${SSH_KEY_TO_ADD} == *.pub ]]; then
        PUB_SSH_KEY_TO_ADD="$SSH_KEY_TO_ADD"
        PRIV_SSH_KEY_TO_ADD="${PUB_SSH_KEY_TO_ADD%.pub}"
    else
        PRIV_SSH_KEY_TO_ADD="$SSH_KEY_TO_ADD"
        PUB_SSH_KEY_TO_ADD="$PRIV_SSH_KEY_TO_ADD".pub
    fi
    PRIV_SSH_KEY_FILE=$(basename "$PRIV_SSH_KEY_TO_ADD")

    destination="pi@$OLD_HOSTNAME:~/.ssh"
    echo -e "\\nCopying $PUB_SSH_KEY_TO_ADD and $PRIV_SSH_KEY_TO_ADD to $destination..."
    eval "scp $SSH_OPTS $PUB_SSH_KEY_TO_ADD $PRIV_SSH_KEY_TO_ADD $destination"
}

provisionPi(){
    echo -e "\\nProvisioning raspberry pi..."

    provision_cmd="ssh $SSH_OPTS pi@$OLD_HOSTNAME -- "
    provision_cmd+="'curl https://raw.githubusercontent.com/dasl-/pitools/main/provision_pi > provision_pi && "
    provision_cmd+="chmod a+x provision_pi && "
    provision_cmd+="./provision_pi -p $NEW_PASSWORD -h $NEW_HOSTNAME -o $OLD_PASSWORD -i /home/pi/.ssh/$PRIV_SSH_KEY_FILE -e $GIT_USER_EMAIL -u $GIT_USER_NAME -r "
    if [[ ${ENABLE_SPI} == "true" ]]; then
        provision_cmd+="-s "
    fi
    provision_cmd+="'"
    echo "Running: $provision_cmd"
    eval "$provision_cmd"
}

main
