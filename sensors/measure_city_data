#!/usr/bin/env python3

import time
import requests
import prometheus_client
from prometheus_client.core import GaugeMetricFamily
import datetime
import pytz
import traceback

# Records local city pm2.5 data for graphing in prometheus
def main():
    registry = setup_prometheus()
    while True:
        # Scrape city data once per hour
        time.sleep(3600)
        prometheus_client.write_to_textfile('/home/pi/observability/timestamped_textfile_collector_data/city_data.prom', registry)

# Save disk space by not collecting unneeded stats.
def setup_prometheus():
    # https://github.com/prometheus/client_python#disabling-default-collector-metrics
    prometheus_client.REGISTRY.unregister(prometheus_client.GC_COLLECTOR)
    prometheus_client.REGISTRY.unregister(prometheus_client.PLATFORM_COLLECTOR)
    prometheus_client.REGISTRY.unregister(prometheus_client.PROCESS_COLLECTOR)

    registry = prometheus_client.CollectorRegistry()
    registry.register(CustomTimestampedGaugeCollector())
    return registry

def get_data():
    # NYC realtime air quality:
    # https://a816-dohbesp.nyc.gov/IndicatorPublic/beta/key-topics/airquality/realtime/
    # We show the average readings from 11 rooftop monitors from the NY State Department of Environmental Conservation (DEC),
    # which collects data for the Federal Clean Air Act.
    url = 'https://azdohv2staticweb.blob.core.windows.net/$web/nyccas_realtime_DEC.csv'
    response = requests.get(url, timeout=5)
    if response.status_code != 200:
        print(f'Got unexpected status code {response.status_code} from {url}', flush = True)
    response.raise_for_status()
    most_recent_pm25_reading = None
    for line in response.text.splitlines():
        if line.startswith('DEC_Avg'):
            parts = line.split(',')
            most_recent_pm25_reading = parts[-1]
            time_of_most_recent_reading = parts[-3]
    if most_recent_pm25_reading is None:
        raise Exception('Unable to read data from response')

    dt = datetime.datetime.strptime(time_of_most_recent_reading, '%Y-%m-%dT%H:%M:%S')
    ny_tz = pytz.timezone('America/New_York')
    localized_dt = ny_tz.localize(dt)
    unix_time_ms = int(round(localized_dt.timestamp()))
    if not unix_time_ms:
        raise Exception('Unable to parse timestamp from response')

    return {
        'pm25 city': [float(most_recent_pm25_reading), unix_time_ms]
    }

# NYC air quality data is delayed 2-4 hours. The delayed data has a timestamp associated with it.
# Let's pass the timestamp associated with the delayed data point to prometheus
# so that prometheus may associats the data point with the proper time.
#
# https://prometheus.github.io/client_python/collector/custom/
# https://github.com/dasl-/pitools/blob/main/observability/README.adoc#timestamped_exporter
class CustomTimestampedGaugeCollector(prometheus_client.registry.Collector):

    def collect(self):
        try:
            data = get_data()
        except Exception:
            print(f"Unable to get local city AQI data: {traceback.format_exc()}", flush = True)
            return []

        gauge_with_custom_timestamp = GaugeMetricFamily(
            'city_pm25', 'Concentration of PM 2.5 in local city. Units: Î¼g/m^3.'
        )
        gauge_with_custom_timestamp.add_metric([], data['pm25 city'][0], data['pm25 city'][1])
        yield gauge_with_custom_timestamp


main()
