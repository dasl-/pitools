#!/usr/bin/env bash

set -euo pipefail -o errtrace

CONFIG=/boot/config.txt
PASSWORD=""
PATH_TO_SSH_KEY="$HOME/.ssh/id_ed25519"
GIT_USER_EMAIL=''
GIT_USER_NAME=''
HOSTNAME="raspberrypi"
ENABLE_SPI=false
SHOULD_DELETE_SELF=false

usage(){
    echo "Usage: $(basename "${0}") -p <PASSWORD> [-h <HOSTNAME>] [-i <PATH_TO_SSH_KEY>] [-s] [-r]"
    echo "Run this from the raspberry pi."
    echo "  -p PASSWORD        : Password for the raspberry pi's user account."
    echo "  -h HOSTNAME        : Set the hostname. Defaults to $HOSTNAME."
    echo "  -i PATH_TO_SSH_KEY : defaults to: $PATH_TO_SSH_KEY"
    echo "  -e GIT_USER_EMAIL  : email address for git"
    echo "  -f GIT_USER_NAME   : user name for git"
    echo "  -s                 : Enable SPI"
    echo "  -r                 : delete self (this script) after running"
    exit 1
}

main(){
    trap 'fail $? $LINENO' ERR

    parseOpts "$@"

    setupSshKey
    updateAndInstallPackages
    setupGit
    setupGitDelta
    installRmate
    clonePiTools
    changeAndSetupShell
    installReadlineHack
    setTimezone
    setOverVoltage
    maybeEnableSpi

    # Setting the hostname should be as close to the last step as possible. Anything after this step that
    # requires `sudo` will emit a warning: "sudo: unable to resolve host raspberrypi: Name or service not known".
    # Note that `sudo` will still work; it's just a "warning".
    setHostname
    maybeDeleteSelf

    info "\\nRestarting..."
    info "Pi will be available via:\\n"
    info "  ssh $USER@$HOSTNAME.local\\n"

    # Hide the "sudo: unable to resolve host raspberrypi: Name or service not known" output by
    # redirecting stderr. This it to avoid someone thinking something didn't work  (it's fine).
    # Related to changing the hostname via setHostname above.
    sudo shutdown -r now 2>/dev/null
}

parseOpts(){
    while getopts ":p:h:i:e:f:sr" opt; do
        case ${opt} in
            p) PASSWORD=${OPTARG} ;;
            h)
                if [[ "$OPTARG" =~ ^[a-z]([a-z0-9-]*[a-z0-9])?$ ]]; then
                    HOSTNAME=${OPTARG}
                else
                    warn "Invalid hostname."
                    usage
                fi
                ;;
            i) PATH_TO_SSH_KEY=${OPTARG} ;;
            e) GIT_USER_EMAIL=${OPTARG} ;;
            f) GIT_USER_NAME=${OPTARG} ;;
            s) ENABLE_SPI=true ;;
            r) SHOULD_DELETE_SELF=true ;;
            \?)
                warn "Invalid option: -$OPTARG"
                usage
                ;;
            :)
                warn "Option -$OPTARG requires an argument."
                usage
                ;;
            *) usage ;;
          esac
    done

    # Validation
    local has_usage_errors
    has_usage_errors=false
    if [ -z "$PASSWORD" ]; then
        has_usage_errors=true
        warn "Please supply a password for the raspberry pi's user account with the flag: -p"
    fi
    if [[ $has_usage_errors == "true" ]]; then
        usage
    fi
}

setupSshKey(){
    info "\\nSetting up ssh key... If you still need to add this key to your github account, see: "
    info "https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account"
    info "https://github.com/settings/keys"
    eval "$(ssh-agent -s)"
    ssh-add "$PATH_TO_SSH_KEY"
    sleep 1 # ssh setup is randomly slow to complete. Wait a bit to avoid cloberring subsequent output lines.
}

updateAndInstallPackages(){
    info "\\nUpdating and installing packages..."
    sudo apt update
    sudo apt -y install git mlocate vim zsh zsh-syntax-highlighting python3-pip
    sudo apt -y full-upgrade

    sudo python3 -m pip install --upgrade speedtest-cli
}

setupGit(){
    info "\\nSetting up git..."

    # Use diff-highlight as the `git diff` tool / pager. This may be overwritten by git delta
    # (see setupGitDelta).
    sudo make -C /usr/share/doc/git/contrib/diff-highlight
    git config --global core.pager '/usr/share/doc/git/contrib/diff-highlight/diff-highlight | less'

    if [[ -n ${GIT_USER_EMAIL} ]]; then
        info "\\nSetting git user email to $GIT_USER_EMAIL..."
        git config --global user.email "$GIT_USER_EMAIL"
    fi
    if [[ -n ${GIT_USER_NAME} ]]; then
        info "\\nSetting git user name to $GIT_USER_NAME..."
        git config --global user.name "$GIT_USER_NAME"
    fi

    git config --global pull.rebase true
}

# Better git diff: https://github.com/dandavison/delta
setupGitDelta(){
    info "\\nSetting up git delta..."

    # See: https://github.com/dandavison/delta/releases
    curl -L https://github.com/dandavison/delta/releases/download/0.12.1/git-delta_0.12.1_armhf.deb > /tmp/delta.deb
    sudo dpkg -i /tmp/delta.deb

    # See: https://github.com/dandavison/delta/issues/162#issuecomment-625952288
    # https://github.com/sharkdp/bat/releases
    curl -L https://github.com/sharkdp/bat/releases/download/v0.20.0/bat_0.20.0_armhf.deb > /tmp/bat.deb
    sudo dpkg -i /tmp/bat.deb
    mkdir -p ~/.config/bat/syntaxes
    curl https://gist.githubusercontent.com/dasl-/9ea0d83cd478f36f6c7deaa737480492/raw/d2276cb45a41180304d7ad8b287b17c948c4d8a0/PHP.sublime-syntax > ~/.config/bat/syntaxes/PHP.sublime-syntax
    mkdir -p ~/.config/bat/themes
    curl 'https://gist.githubusercontent.com/dasl-/255b183383bd412356d347c61d77181d/raw/4b4b41dfc1d705f13d40244c7fcf420c70a31d86/Monokai%2520(SL).tmTheme' > ~/.config/bat/themes/'Monokai (SL).tmTheme'
    bat cache --clear
    bat cache --build

    # See: https://github.com/dandavison/delta#get-started
    git config --global core.pager 'delta --true-color always --syntax-theme "Monokai (SL)"'
    git config --global interactive.diffFilter 'delta --true-color always --syntax-theme "Monokai (SL)" --color-only'
    git config --global delta.navigate 'true'
    git config --global delta.light 'false'
    git config --global merge.conflictstyle 'diff3'
    git config --global diff.colorMoved 'default'

    # My delta customizations:
    git config --global delta.minus-style 'syntax auto'
    git config --global delta.word-diff-regex '.' # https://github.com/dandavison/delta/issues/184

}

# allows `subl path_to_file.txt` to use sublime text to edit the file on the pi
#
# This requires setting up ssh port forwarding for our port in the computer we are sshing from.
installRmate(){
    info "\\nInstalling rmate..."
    sudo wget -O /usr/local/bin/subl https://raw.githubusercontent.com/aurora/rmate/master/rmate
    sudo chmod a+x /usr/local/bin/subl

    # set subl as default git editor
    git config --global core.editor 'subl -w'
}

# Useful for the wifi_config script, shairport-sync installation, etc
clonePiTools(){
    info "\\nInstalling pitools..."
    dev_dir="$HOME/development"
    mkdir -p "$dev_dir"
    git -C "$dev_dir" clone https://github.com/dasl-/pitools.git
}

changeAndSetupShell(){
    info "\\nSetting up zsh shell..."

    # change default shell
    echo "$PASSWORD" | chsh -s /usr/bin/zsh

    # oh-my-zsh
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    # iterm shell integration
    curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh

    # fzf
    # We don't use apt to install fzf because the apt version is sometimes too old to be compatible with fzf-tab.
    # See: https://github.com/Aloxaf/fzf-tab/issues/189
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --key-bindings --completion --no-update-rc

    # fzf-tab: change native zsh autocomplete to always use fzf
    # https://github.com/Aloxaf/fzf-tab#install
    fzf_tab_dir="$HOME/.config/zsh"
    mkdir -p "$fzf_tab_dir"
    git -C "$fzf_tab_dir" clone https://github.com/Aloxaf/fzf-tab

    curl https://raw.githubusercontent.com/dasl-/pitools/main/homedir/.zshrc > "$HOME/.zshrc"

    curl https://raw.githubusercontent.com/dasl-/pitools/main/homedir/zsh_fix_history > "$HOME/zsh_fix_history"
    sudo chmod a+x "$HOME/zsh_fix_history"
}

# Enable fzf history search in any application that uses libreadline.
# See: https://github.com/lincheney/fzf-tab-completion#readline
installReadlineHack(){
    info "\\nInstalling readline hack..."
    curl https://raw.githubusercontent.com/dasl-/pitools/main/homedir/.inputrc > "$HOME/.inputrc"
    mkdir -p ~/readline-hack

    local so_suffix='32bit';
    if [[ $(getconf LONG_BIT)  == '64' ]] ; then
        so_suffix='64bit'
    fi

    curl "https://raw.githubusercontent.com/dasl-/pitools/main/homedir/readline-hack/librl_custom_function_$so_suffix.so" > "$HOME/readline-hack/librl_custom_function.so"
    curl "https://raw.githubusercontent.com/dasl-/pitools/main/homedir/readline-hack/librl_custom_isearch_$so_suffix.so" > "$HOME/readline-hack/librl_custom_isearch.so"

    mkdir -p ~/bin
    curl https://raw.githubusercontent.com/lincheney/rl_custom_isearch/master/bin/rl_custom_isearch > "$HOME/bin/rl_custom_isearch"
    chmod a+x "$HOME/bin/rl_custom_isearch"

    # readline-hack workaround: https://gist.github.com/dasl-/8530db0b95a8793756cb5ce671651acf
    sudo ln -s /usr/lib/arm-linux-gnueabihf/libreadline.so.8.1 /usr/lib/libreadline.so
}

setTimezone(){
    sudo timedatectl set-timezone UTC
}

# See: https://forums.raspberrypi.com/viewtopic.php?t=334876
setOverVoltage(){
    local over_voltage
    over_voltage=$(vcgencmd get_config over_voltage | sed -n 's/over_voltage=\(.*\)/\1/p')
    if (( over_voltage >= 2 )); then
        info "over_voltage was already high enough ( $over_voltage )..."
        return
    fi

    force_turbo=$(vcgencmd get_config force_turbo | sed -n 's/force_turbo=\(.*\)/\1/p')
    if (( force_turbo == 1 )); then
        # See: https://www.raspberrypi.com/documentation/computers/config_txt.html#overclocking-options
        warn "WARNING: not setting over_voltage because force_turbo is enabled and we don't " \
            "want to set your warranty bit. This might result in wifi or video playback issues."
        return
    fi

    # Set over_voltage.
    info "Setting over_voltage to 2..."

    # comment out existing over_voltage lines in config
    sudo sed $CONFIG -i -e "s/^\(over_voltage=.*\)/#\1/"

    echo -e 'over_voltage=2' | sudo tee -a $CONFIG >/dev/null
}

maybeEnableSpi(){
    if [[ ${ENABLE_SPI} == "true" ]]; then
        info "\\nEnabling SPI..."
        # https://raspberrypi.stackexchange.com/a/96679
        sudo raspi-config nonint do_spi 0
    fi
}

# Allows sshing and hitting the pifi webpage via "<hostname>.local"
# See: https://www.raspberrypi.org/documentation/remote-access/ip-address.md "Resolving raspberrypi.local with mDNS"
setHostname(){
    info "\\nSetting hostname to: $HOSTNAME"
    echo "$HOSTNAME" | sudo tee /etc/hostname >/dev/null 2>&1
    sudo sed -i -E 's/(127\.0\.1\.1\s+)[^ ]+/\1'"$HOSTNAME"'/g' /etc/hosts
}

maybeDeleteSelf() {
    if [[ ${SHOULD_DELETE_SELF} == "true" ]]; then
        SCRIPT_DIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
        SCRIPT_NAME=$(basename -- "${BASH_SOURCE[0]}")
        SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_NAME"
        info "\\nDeleting self ( $SCRIPT_PATH )..."
        rm "$SCRIPT_PATH"
    fi
}

fail(){
    local exit_code=$1
    local line_no=$2
    local script_name
    script_name=$(basename "${BASH_SOURCE[0]}")
    die "Error in $script_name at line number: $line_no with exit code: $exit_code"
}

info(){
    echo -e "\x1b[32m$*\x1b[0m" # green stdout
}

warn(){
    echo -e "\x1b[33m$*\x1b[0m" # yellow stdout
}

die(){
    echo
    echo -e "\x1b[31m$*\x1b[0m" >&2 # red stderr
    exit 1
}

main "$@"
