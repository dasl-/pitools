#!/usr/bin/env bash

set -eou pipefail

OLD_PASSWORD='raspberry'
NEW_PASSWORD="$OLD_PASSWORD"
PATH_TO_SSH_KEY="$HOME/.ssh/id_ed25519"
GIT_USER_EMAIL=''
GIT_USER_NAME=''
HOSTNAME="raspberrypi.local"
ENABLE_SPI=false
SHOULD_DELETE_SELF=false

usage(){
    echo "Usage: $(basename "${0}") [-n <NEW_PASSWORD>] [-h <HOSTNAME>] [-o <OLD_PASSWORD>] [-i <PATH_TO_SSH_KEY>] [-s] [-r]"
    echo "Run this from the raspberry pi."
    echo "  -p NEW_PASSWORD    : Set the new password. Defaults to $OLD_PASSWORD"
    echo "  -h HOSTNAME        : Set the hostname. Defaults to $HOSTNAME."
    echo "  -o OLD_PASSWORD    : defaults to: $OLD_PASSWORD"
    echo "  -i PATH_TO_SSH_KEY : defaults to: $PATH_TO_SSH_KEY"
    echo "  -e GIT_USER_EMAIL  : email address for git"
    echo "  -u GIT_USER_NAME   : user name for git"
    echo "  -s                 : Enable SPI"
    echo "  -r                 : delete self (this script) after running"
    exit 1
}

while getopts ":p:h:o:i:e:u:sr" opt; do
    case ${opt} in
        p) NEW_PASSWORD=${OPTARG} ;;
        h)
            if [[ "$OPTARG" =~ ^[a-z]([a-z0-9-]*[a-z0-9])?$ ]]; then
                HOSTNAME=${OPTARG}
            else
                echo "Invalid hostname."
                usage
            fi
            ;;
        o) OLD_PASSWORD=${OPTARG} ;;
        i) PATH_TO_SSH_KEY=${OPTARG} ;;
        e) GIT_USER_EMAIL=${OPTARG} ;;
        u) GIT_USER_NAME=${OPTARG} ;;
        s) ENABLE_SPI=true ;;
        r) SHOULD_DELETE_SELF=true ;;
        *) usage ;;
      esac
done

main(){
    validateOpts

    setupSshKey
    updateAndInstallPackages
    setupGit
    installRmate
    clonePiTools
    changeAndSetupShell
    setHostname
    maybeEnableSpi
    changePassword
    maybeDeleteSelf

    echo -e "\\nRestarting..."
    echo -e "Pi will be available via:\\n"
    echo -e "  ssh pi@$HOSTNAME.local\\n"

    # redirect "sudo: unable to resolve host raspberrypi: Name or service not known" to /dev/null
    # I think sudo has weirdness immediately after a hostname change. Hide this output to avoid
    # someone thinking something didn't work (it's fine).
    sudo shutdown -r now 2>/dev/null
}

validateOpts(){
    :
}

setupSshKey(){
    echo -e "\\nSetting up ssh key... If you still need to add this key to your github account, see: "
    echo "https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account"
    echo "https://github.com/settings/keys"
    eval "$(ssh-agent -s)"
    ssh-add "$PATH_TO_SSH_KEY"
    sleep 1 # ssh setup is randomly slow to complete. Wait a bit to avoid cloberring subsequent output lines.
}

updateAndInstallPackages(){
    echo -e "\\nUpdating and installing packages..."
    sudo apt update
    sudo apt -y install git mlocate vim zsh zsh-syntax-highlighting
    sudo apt -y full-upgrade
}

# use diff-highlight as diff tool / pager
setupGit(){
    echo -e "\\nSetting up git..."
    sudo make -C /usr/share/doc/git/contrib/diff-highlight
    git config --global core.pager '/usr/share/doc/git/contrib/diff-highlight/diff-highlight | less'
    if [[ -n ${GIT_USER_EMAIL} ]]; then
        echo -e "\\nSetting git user email to $GIT_USER_EMAIL..."
        git config --global user.email "$GIT_USER_EMAIL"
    fi
    if [[ -n ${GIT_USER_NAME} ]]; then
        echo -e "\\nSetting git user name to $GIT_USER_NAME..."
        git config --global user.name "$GIT_USER_NAME"
    fi
}

# allows `subl path_to_file.txt` to use sublime text to edit the file on the pi
# By default we are using a non-standard port so that we don't conflict with a friend who may
# be hacking on the same device at the same time also using rmate. We use 52699 instead of the
# standard 52699.
#
# This requires:
# 1) aliasing the `subl` command in ~/.zshrc to use our port
# 2) setting up ssh port forwarding for our port in the computer we are sshing from
# 3) configuring the rsub sublime plugin to use our port in its settings (package control -> list packages -> rsub)
installRmate(){
    echo -e "\\nInstalling rmate..."
    sudo wget -O /usr/local/bin/subl https://raw.githubusercontent.com/aurora/rmate/master/rmate
    sudo chmod a+x /usr/local/bin/subl
}

# Useful for the wifi_config script
clonePiTools(){
    echo -e "\\nInstalling pitools..."
    dev_dir="$HOME/development"
    mkdir -p "$dev_dir"
    git -C "$dev_dir" clone https://github.com/dasl-/pitools.git
}

changeAndSetupShell(){
    echo -e "\\nSetting up zsh shell..."

    # change default shell
    echo "$OLD_PASSWORD" | chsh -s /usr/bin/zsh

    # oh-my-zsh
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    # iterm shell integration
    curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh

    # fzf
    # We don't use apt to install fzf because the apt version is sometimes too old to be compatible with fzf-tab.
    # See: https://github.com/Aloxaf/fzf-tab/issues/189
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --key-bindings --completion --no-update-rc

    # fzf-tab: change native zsh autocomplete to always use fzf
    # https://github.com/Aloxaf/fzf-tab#install
    fzf_tab_dir="$HOME/.config/zsh"
    mkdir -p "$fzf_tab_dir"
    git -C "$fzf_tab_dir" clone https://github.com/Aloxaf/fzf-tab

    curl https://raw.githubusercontent.com/dasl-/pitools/main/homedir/.zshrc > "$HOME/.zshrc"

    curl https://raw.githubusercontent.com/dasl-/pitools/main/homedir/zsh_fix_history > "$HOME/zsh_fix_history"
    sudo chmod a+x "$HOME/zsh_fix_history"
}

# Allows sshing and hitting the pifi webpage via "<hostname>.local"
# See: https://www.raspberrypi.org/documentation/remote-access/ip-address.md "Resolving raspberrypi.local with mDNS"
setHostname(){
    echo -e "\\nSetting hostname to: $HOSTNAME"
    echo "$HOSTNAME" | sudo tee /etc/hostname >/dev/null 2>&1
    sudo sed -i -E 's/(127\.0\.1\.1\s+)[^ ]+/\1'"$HOSTNAME"'/g' /etc/hosts
}

maybeEnableSpi(){
    if [[ ${ENABLE_SPI} == "true" ]]; then
        echo -e "\\nEnabling SPI..."
        # https://raspberrypi.stackexchange.com/a/96679
        sudo raspi-config nonint do_spi 0
    fi
}

changePassword(){
    echo -e "\\nChanging password to: $NEW_PASSWORD"
    echo -e "$OLD_PASSWORD\n$NEW_PASSWORD\n$NEW_PASSWORD" | passwd
    sleep 1 # password setup is randomly slow to complete. Wait a bit to avoid cloberring subsequent output lines.
}

maybeDeleteSelf() {
    if [[ ${SHOULD_DELETE_SELF} == "true" ]]; then
        SCRIPT_DIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
        SCRIPT_NAME=$(basename -- "${BASH_SOURCE[0]}")
        SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_NAME"
        echo -e "\\nDeleting self ( $SCRIPT_PATH )..."
        rm "$SCRIPT_PATH"
    fi
}

main
